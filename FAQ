Q: Why did you write XYAMLSpecification.yaml to generate other interfaces? Isn't that overkill?
A: No, it allows me to throw my original designs away but 
    o create a plugin of the old spec which then can be used to load older data (backwards compatibility)
    o fast iterate over several ideas and finally be flexibile, rewrite the specification instead of
    the boilerplate code

    Imagine this situation: The code works (stable tree) but later we find out that we need a
    totally different approach which breaks backwards compat. So we turn the current stable tree
    into a plugin and our dev tree will become the new stable tree.

    Development/Evolution of the XYAMLSpecification

    1.) stable tree -> plugin "XYAML Reader/Writer Version: X"
    2.) devel  tree -> new XYAMLSpecification core.
    3.) Old plugins will be supported via the plugin from 1.)
    4.) Plugins should be migrated to the new structure otherwise we'll end up with too much legacy code
    5.) IF STILL TROUBLE GOTO 1 OTHERWISE HF


Q: There is a version number and a SHA1 hash over the Spec file?
A: If you don't increment the version number if you temper with the Spec - I  * W I L L * catch you.

Q: Why didn't you turn the XYAMLSpecification.yaml directly into a DSL?
A: Good point. Actually I would have done that but I wanted to make life easy for C/C++ dev's and
   plugin people to read the Spec file. YAML aka JSON is well supported and there are many parsers out
   there for this which doesn't require me or others to write a DSL parser for every foo language.


