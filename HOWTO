Howto do x...
-------------




Q: How to develop a Plugin?
A: First, take a look at all documentation and familiarize yourself with the Abstract Data Structure
   (ADT) of MotionX. The ADT was designed to be purely OOP using a UML design tool called
   "Umbrello".

   Umbrello is able to generate from this specification several stubs which were then completed
   which result in the MotionX format binding for each language. Also the tool generated XML Schema
   Definition files (.xsd's) which are normally used to validate XML data against the UML
   specification and allow judgement if the data is well formed or not.

   These XSD's can be used by Plugin developers directly who wish to work on XML based technologies.
   For people who prefer simpler approaches like e.g. YAML (JSON superset) there is a human readable
   dump generated of the current stable interface which can be easily be included in your proejct to
   know which methods to address and what they accept.

   So in summary:

   1.) Read specs and understand UML
   2.) Pick either XSD or YAML/JSON files for interface definition
   3.) Use your preferred language to develop a plugin to read/write to the MotionX format.
   4.) To get officially supported please submit your plugin with proper interface (e.g. CLI) to the
       main developers.


Q: Why a plugin mapping via YAML/XML(XSD) file?
A: The mapping is nice because it is possible to use the information internally for your plugin and
   write a abstraction against it. Meaning that you create a internal abstraction for yourself and
   work with the YAML + UML. Specifically:

    o YAML depends on
        - ruby's xmlsimple
        - $script

    o UML depends on
        - Umbrello version and its dependencies

    o XMI depends strongly on Umbrello version used.
        - Currently it is NOT XMI Standard conform.
          (discourage using it)

    o XML/XSD depends on
        - Ruby's soap4r
            o xsd2ruby.rb
        - Ruby's xsd/mapping


  The most reliable (stable) is probably YAML. You can either implement a abstract interface for
  your plugin or develop directly against the $generated code from the spec. If you develop directly
  though, chances are that the changes later might be more complex.


  1.) Idea

                   |                                                              |
  MotionX Format   | <-- YAML version X, UML version X, XML/XSD/XMI version X --> | Your Plugin
                   |                                                              |


  2.) Realization

                     <Internal Datastructures>     <Mapping Table generated by e.g. YAML>       <MotionX>
                   |                            |                                           |
  Your Plugin:     | a,b,c,..................z  |  a -> 1, b -> 2, ....                     |  Provides, 1,2,3...
                   |                            |                                           |


  This is not a must but probably will make life easier for future plugin development.
  Its overkill but fun :D.


